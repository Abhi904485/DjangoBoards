"""
Django settings for DjangoBoards project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from django.contrib.messages import constants as messages
from decouple import config, Csv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from django.urls import reverse

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', cast=str)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

INTERNAL_IPS = config('INTERNAL_IPS', cast=Csv())

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'boards',
    'debug_toolbar',
    'widget_tweaks',
    'accounts',
    'my_celery_progress_bar',
    'celery_progress',
    'django_celery_results',
    'django_celery_beat'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware'
]

ROOT_URLCONF = 'DjangoBoards.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, 'boards', 'templates', 'boards'),
                 os.path.join(BASE_DIR, 'accounts', 'templates', 'accounts'),
                 os.path.join(BASE_DIR, 'my_celery_progress_bar', 'templates', 'my_celery_progress_bar'), ]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoBoards.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "static_cdn")

AUTH_USER_MODEL = 'accounts.User'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend', cast=str)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=True, cast=bool)
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com', cast=str)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='xyz@gmail.com', cast=str)
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default="password", cast=str)
EMAIL_PORT = config('EMAIL_PORT', default=465, cast=int)

CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379', cast=str)
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379', cast=str)
CELERY_ACCEPT_CONTENT = config('CELERY_ACCEPT_CONTENT', default=['application/json'], cast=Csv())
CELERY_TASK_SERIALIZER = config('CELERY_TASK_SERIALIZER', default='json', cast=str)
CELERY_RESULT_SERIALIZER = config('CELERY_RESULT_SERIALIZER', default='json', cast=str)
CELERY_TIMEZONE = config('CELERY_TIMEZONE', default='Asia/Kolkata', cast=str)
CELERY_CACHE_BACKEND = "django-cache"

# CELERY_BEAT_SCHEDULE = {
#     "every_3_seconds": {
#         'task': 'my_celery_progress_bar.tasks.send_mail',
#         'schedule': 3,
#         'args': ('Abhishek@gmail.com',)
#     }
# }


# CELERY_BEAT_SCHEDULE = {
#  'send-summary-every-hour': {
#        'task': 'summary',
#         # There are 4 ways we can handle time, read further
#        'schedule': 3600.0,
#         # If you're using any arguments
#        'args': (‘We don’t need any’,),
#     },
#     # Executes every Friday at 4pm
#     'send-notification-on-friday-afternoon': {
#          'task': 'my_app.tasks.send_notification',
#          'schedule': crontab(hour=16, day_of_week=5),
#         },

# }


# from celery.schedules import solar
#
# CELERY_BEAT_SCHEDULE = {
#     'send-notification-on-friday-afternoon': {
#         'task': 'my_app.tasks.send_notification',
#         'schedule': solar('sunset', -37.81753, 144.96715),
#     },
# }


# from celery.task import periodic_task
# from datetime import timedelta
#
# @periodic_task(run_every=timedelta(seconds=30))
# def every_30_seconds():
#     print("Running periodic task!")


# from celery.schedules import crontab
# from celery.task import periodic_task
#
# @periodic_task(run_every=crontab(hour=7, minute=30, day_of_week=1))
# def every_monday_morning():
#     print("Execute every Monday at 7:30AM.")


# https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#introduction
